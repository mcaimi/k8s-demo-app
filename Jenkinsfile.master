pipeline {
  parameters {
    string(name: 'REGISTRY_URL', defaultValue: 'registry.apps.kubernetes.local', description: 'The docker registry to push/pull images to')

    string(name: 'AGENT_NAME', defaultValue: 'maven-agent', description: 'The name of the jenkins agent image to build')
    string(name: 'AGENT_TAG', defaultValue: 'latest', description: 'The docker image label to tag the custom agent with') 
    
    string(name: 'NEXUS_URL', defaultValue: 'nexus.apps.kubernetes.local', description: 'The Nexus server URL')
    string(name: 'MAVEN_REPO_NAME', defaultValue: 'maven-releases', description: 'The Maven repo on Nexus to push artifacts to')
    string(name: 'NEXUS_CREDENTIALS', defaultValue: 'jenkins-nexus', description: 'The Jenkins credentials to use when authenticating on Nexus')
    string(name: 'NEXUS_PROTO', defaultValue: 'http', description: 'The protocol to employ when connecting to Nexus (http,https)')
    string(name: 'SONAR_CREDS', defaultValue: 'jenkins-sonar', description: 'The Jenkins credentials to use when authenticating on SonarQube')
    string(name: 'SONAR_INSTALLATION', defaultValue: 'jenkins-sonar', description: 'The SonarQube installation name')
  
    string(name: 'IMAGE_NAME', defaultValue: 'java-runner', description: 'The name of the application container to build')
    string(name: 'IMAGE_VERSION', defaultValue: 'latest', description: 'The version of the application container to build')
    string(name: 'SERVICE_ACCOUNT', defaultValue: 'ci-jenkins', description: 'Service Account to use when running the agent Pod')
  }

  agent {
    node {
      label 'master'
      customWorkspace "${env.JobPath}"
    }
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }

  environment {
    GROUP_ID = readMavenPom().getGroupId()
    ARTIFACT_ID = readMavenPom().getArtifactId()
    VERSION = readMavenPom().getVersion()
    PACKAGING = readMavenPom().getPackaging()
  }

  stages {
    stage ('INVOKE: Build Custom Maven Agent') {
      steps {
        build job: 'build-maven-agent-pipeline', parameters: [
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}"),
            string(name: 'BUILD_NAME', value: "${params.AGENT_NAME}"),
            string(name: 'BUILD_TAG', value: "${params.AGENT_TAG}")
          ]
      }
    }

    stage ('INVOKE: Build and Test Application Bundle') {
      steps {
        build job: 'build-application-artifact-pipeline', parameters: [
            string(name: 'NEXUS_URL', value: "${params.NEXUS_URL}"),
            string(name: 'MAVEN_REPO_NAME', value: "${params.MAVEN_REPO_NAME}"),
            string(name: 'NEXUS_CREDENTIALS', value: "${params.NEXUS_CREDENTIALS}"),
            string(name: 'NEXUS_PROTO', value: "${params.NEXUS_PROTO}"),
            string(name: 'SONAR_CREDS', value: "${params.SONAR_CREDS}"),
            string(name: 'SONAR_INSTALLATION', value: "${params.SONAR_INSTALLATION}")
          ]
      }
    }

    stage('INVOKE: Assemble Container Image Artifact') {
      steps {
        build job: 'java-runner-build-pipeline', parameters: [
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}"),
            string(name: 'NEXUS_URL', value: "${params.NEXUS_URL}"),
            string(name: 'NEXUS_CREDS', value: "${params.NEXUS_CREDENTIALS}"),
            string(name: 'IMAGE_NAME', value: "${params.IMAGE_NAME}"),
            string(name: 'IMAGE_VERSION', value: "${params.IMAGE_VERSION}"),
            string(name: 'ARTIFACT_NAME', value: "${env.GROUP_ID}:${env.ARTIFACT_ID}:${env.VERSION}")
          ]
      }     
    }

    stage('INVOKE: Deploy, Test and Promote') {
      steps {
        build job: 'application-deployment-pipeline', parameters: [
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}"),
            string(name: 'IMAGE_NAME', value: "${params.IMAGE_NAME}"),
            string(name: 'IMAGE_VERSION', value: "${params.IMAGE_VERSION}"),
            string(name: 'SERVICE_ACCOUNT', value: "${params.SERVICE_ACCOUNT}")
          ]
      }     
    }
  }
}