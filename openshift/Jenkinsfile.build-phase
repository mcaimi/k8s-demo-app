pipeline {
  parameters {
    string(name: 'NEXUS_URL', defaultValue: 'nexus.apps.kubernetes.local', description: 'The Nexus server URL')
    string(name: 'MAVEN_REPO_NAME', defaultValue: 'maven-releases', description: 'The Maven repo on Nexus to push artifacts to')
    string(name: 'NEXUS_CREDENTIALS', defaultValue: 'jenkins-nexus', description: 'The Jenkins credentials to use when authenticating on Nexus')
    string(name: 'NEXUS_PROTO', defaultValue: 'http', description: 'The protocol to employ when connecting to Nexus (http,https)')
    string(name: 'SONAR_CREDS', defaultValue: 'jenkins-sonar', description: 'The Jenkins credentials to use when authenticating on SonarQube')
    string(name: 'SONAR_INSTALLATION', defaultValue: 'jenkins-sonar', description: 'The SonarQube installation name')
    string(name: 'BUILD_NAMESPACE', defaultValue: 'jenkins', description: 'The namespace in which builds are performed')
    string(name: 'REGISTRY_URL', defaultValue: 'docker-registry.default.svc:5000/jenkins', description: 'The image registry url')
    string(name: 'OPENSHIFT_CLUSTER', defaultValue: 'ocp', description: 'The name of the Openshift cluster defined in Jenkins Settings')
    string(name: 'SERVICE_ACCOUNT', defaultValue: 'ci-jenkins', description: 'Service Account to use when running the agent Pod')
    string(name: 'DBUSER', defaultValue: 'hibernate', description: 'Username for the test db')
    string(name: 'DBPASS', defaultValue: 'hibernate', description: 'Password of the test user')
  }

  agent {
    kubernetes {
      label 'jenkins-slave-maven'
      defaultContainer 'jnlp'
      yaml k8sAgentPodYaml("${params.REGISTRY_URL}")
    }
  }

  environment {
    GROUP_ID = readMavenPom().getGroupId()
    ARTIFACT_ID = readMavenPom().getArtifactId()
    VERSION = readMavenPom().getVersion()
    PACKAGING = readMavenPom().getPackaging()
    BUILD_NS = "${params.BUILD_NAMESPACE}"
    DBKIND = "postgresql"
    DBHOST = "${env.BUILD_NS}-postgres-service-${env.BUILD_ID}"
    DBPORT = "5432"
    DBNAME = "hibernate_db"
    DBUSER = "${params.DBUSER}"
    DBPASS = "${params.DBPASS}"
    FLYWAY_DEFAULT_SCHEMA = "dev_schema"
    HIBERNATE_LOAD_FILE = "no-file"
    DB_GENERATION = "none"
    ORM_LOG = true
    JDBC_MAX_SIZE = 8
    JDBC_MIN_SIZE = 2
    FLYWAY_MIGRATE_AT_START = true
    FLYWAY_BASELINE_VERSION = "1.0.0"
    FLYWAY_BASELINE_DESCRIPTION = "Initial"
    FLYWAY_CONNECTION_RETRIES = 100
    FLYWAY_MIGRATION_TABLE = "dev_history"
    FLYWAY_MIGRATIONS_LOCATION = "db/migrations/dev"
    FLYWAY_BASELINE_ON_MIGRATE = true
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }
  
  stages {
    stage ("MVN: PREPARE") {
      steps {
        container('jnlp') {
          echo "Preparing Maven Wrapper (${env.BUILD_ID})"
          sh "mvn -N io.takari:maven:wrapper"
        }
      }
    }

    stage ("MVN: BUILD") {
      steps {
        container('jnlp') {
          echo "Running maven build... (${env.BUILD_ID})"
          sh "./mvnw clean install -DskipTests"
        }
      }
    }

    stage ('INVOKE: Deploy a Postgres Database for Unit Testing.') {
      steps {
        build job: 'postgres-database-pipeline', parameters: [
            string(name: 'DBENV', value: "${env.BUILD_NS}"),
            string(name: 'ACTION', value: "deploy"),
            string(name: 'PARENT_BUILD_ID', value: "${env.BUILD_ID}"),
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}")
          ]
      }
    }

    stage ("MVN: UNIT TESTS") {
      steps {
        container('jnlp') {
          echo "Running maven tests... (${env.BUILD_ID}) DB ENDPOINT: ${env.DBHOST}"
          sh "./mvnw test"
          echo "Archiving test results in JUnit format... (${env.BUILD_ID})"
          junit '**/target/surefire-reports/TEST-*.xml'
        }
      }
      post {
        failure {
          build job: 'postgres-database-pipeline', parameters: [
            string(name: 'DBENV', value: "${env.BUILD_NS}"),
            string(name: 'ACTION', value: "undeploy"),
            string(name: 'PARENT_BUILD_ID', value: "${env.BUILD_ID}"),
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}")
          ]
        }
      }
    }

    stage ('INVOKE: Undeploy the test database instance.') {
      steps {
        build job: 'postgres-database-pipeline', parameters: [
            string(name: 'DBENV', value: "${env.BUILD_NS}"),
            string(name: 'ACTION', value: "undeploy"),
            string(name: 'PARENT_BUILD_ID', value: "${env.BUILD_ID}"),
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}")
          ]
      }
    }

    stage ("MVN: CODE COVERAGE") {
      steps {
        container('jnlp') {
          echo "Running maven jacoco plugin... (${env.BUILD_ID})"
          sh "./mvnw jacoco:report"
          jacoco( 
                execPattern: 'target/*.exec',
                classPattern: 'target/classes',
                sourcePattern: 'src/main/java',
                exclusionPattern: 'src/test*'
          )
        }
      }
    }

    stage ("SONAR: SONARQUBE ANALYSIS") {
      steps {
        container('jnlp') {
          echo "Running maven sonarscanner... (${env.BUILD_ID})"
          withSonarQubeEnv(credentialsId: "${params.SONAR_CREDS}", installationName: "${params.SONAR_INSTALLATION}") {
            sh 'mvn sonar:sonar'
          }
        }
      }
    }

    stage ("SONAR: WAIT FOR QUALITY GATE") {
      steps {
        container('jnlp') {
          echo "Evaluating Code Quality Gate... (${env.BUILD_ID})"
          waitForQualityGate abortPipeline: true
        }
      }
    }
    
    stage ("MVN: PACKAGE") {
      steps {
        container('jnlp') {
          echo "Running maven package... (${env.BUILD_ID})"
          sh "./mvnw clean package -DskipTests"
        }
      }
    }

    stage ("NEXUS: PUBLISH TO REPOSITORY") {
      steps {
        container('jnlp') {
          nexusArtifactUploader(
            nexusVersion: "nexus3",
            protocol: "${params.NEXUS_PROTO}",
            nexusUrl: "${params.NEXUS_URL}",
            groupId: "${GROUP_ID}",
            version: "${VERSION}.${env.BUILD_NUMBER}",
            repository: "${params.MAVEN_REPO_NAME}",
            credentialsId: "${params.NEXUS_CREDENTIALS}",
            artifacts: [
              [
               artifactId: "${ARTIFACT_ID}",
               type: "${PACKAGING}",
               classifier: "",
               file: "target/${ARTIFACT_ID}-${VERSION}-runner.${PACKAGING}"
              ]
            ]);
        }
      }
    }

    stage ('INVOKE: Start the JAVA-RUNNER BuildConfig on OCP.') {
      steps {
        build job: 'ocp-buildconfig-handler', parameters: [
            string(name: 'BUILDCONFIG_NAME', value: "jenkins-java-runner"),
            string(name: 'OPENSHIFT_CLUSTER', value: "${params.OPENSHIFT_CLUSTER}"),
            string(name: 'SERVICE_ACCOUNT', value: "${params.SERVICE_ACCOUNT}"),
            string(name: 'REGISTRY_URL', value: "${params.REGISTRY_URL}")
          ]
      }
    }
  }

  post {
    success {
      echo "Archiving artifacts for build ${env.BUILD_ID}"
      archiveArtifacts 'target/*.jar'
    }
  }
}

def k8sAgentPodYaml(registryUrl) {
  mavenYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
    - name: jnlp
      image: URL_PLACEHOLDER/maven-agent:latest
      imagePullPolicy: IfNotPresent
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    """
  return mavenYaml.replaceAll(~/URL_PLACEHOLDER/, registryUrl)
}
