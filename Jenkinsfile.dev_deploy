pipeline {
  parameters { 
    string(name: 'REGISTRY_URL', defaultValue: 'registry.apps.kubernetes.local', description: 'The docker registry to push the image to')
    string(name: 'IMAGE_NAME', defaultValue: 'java-runner', description: 'The name of the built application container')
    string(name: 'IMAGE_VERSION', defaultValue: 'latest', description: 'The version of the built application container')
    string(name: 'SERVICE_ACCOUNT', defaultValue: 'ci-jenkins', description: 'Service Account to use when running the agent Pod')
    string(name: 'TLS_VERIFY', defaultValue: 'false', description: 'Validate target registry TLS certificate before pushing image.') 
  }

  agent {
    kubernetes {
      label "jenkins-agent-deploy"
      defaultContainer "jnlp"
      yaml k8sAgentPodYaml("${params.SERVICE_ACCOUNT}", "${params.REGISTRY_URL}")
    }
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }

  stages {
    stage ("PULL SOFTWARE IMAGE FROM REMOTE REPOSITORY") {
      steps {
        container("buildah") {
          echo "Pulling image from ${params.REGISTRY_URL}...  (${env.BUILD_ID})"
          sh "buildah pull --tls-verify=${params.TLS_VERIFY} docker://${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION}"
          sh "buildah images"
        }
      }
    }

    stage ("TAG IMAGE FOR DEV DEPLOYMENT") {
      steps {
        container("buildah") {
          echo "TAGGING CONTAINER: ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev (${env.BUILD_ID})"
          sh "buildah tag ${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION} ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev"
          sh "buildah push --tls-verify=${params.TLS_VERIFY} ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev docker://${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev"
        }
      }
    }

    stage ("DEPLOY AND TEST IN DEV") {
      steps {
        container("jnlp") {
          echo "DEPLOYING APPLICATION IN DEV NAMESPACE (${env.BUILD_ID})"

          echo " -> Deploying the Database Instance for DEV ENVIRONMENT (${env.BUILD_ID})"
          build job: 'postgres-database-pipeline', parameters: [
            string(name: 'DBENV', value: "dev"),
            string(name: 'ACTION', value: "deploy"),
            string(name: 'PARENT_BUILD_ID', value: "${env.BUILD_ID}")
          ]

          sh "sed -i -e 's/NS_ID/dev/' -e 's/BUILD_ID/${env.BUILD_ID}/' k8s/deployments/dev/kustomization.yaml && kubectl apply -k k8s/deployments/dev/"
        }
        container("jnlp") {
          echo "TESTING APPLICATION IN DEV NAMESPACE (${env.BUILD_ID})"
          sh "bash k8s/deployments/dev/tests.sh"
        }
      }
      post {
        failure {
          container("jnlp") {
            echo "DEV DEPLOYMENT FAILED TESTS, UNDEPLOY... (${env.BUILD_ID})"

            echo " -> Removing the Database Instance for DEV ENVIRONMENT (${env.BUILD_ID})"
            build job: 'postgres-database-pipeline', parameters: [
              string(name: 'DBENV', value: "dev"),
              string(name: 'ACTION', value: "undeploy"),
              string(name: 'PARENT_BUILD_ID', value: "${env.BUILD_ID}")
            ]

            sh "sed -i -e 's/NS_ID/dev/' -e 's/BUILD_ID/${env.BUILD_ID}/' k8s/deployments/dev/kustomization.yaml && kubectl delete -k k8s/deployments/dev/"
          }
          container("buildah") {
            echo "UNTAGGING IMAGE FROM DEV ENVIRONMENT"
            sh "buildah rmi ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev"
          }
        }
      }
    }
  }
}

def k8sAgentPodYaml(serviceAccount, registryUrl) {
  dockerInDockerYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  serviceAccountName: SA_NAME
  automountServiceAccountToken: true
  containers:
    - name: jnlp
      image: URL_PLACEHOLDER/maven-agent:latest
      imagePullPolicy: IfNotPresent
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    - name: buildah
      image: docker.io/mcaimi/jenkins-agent-buildah:jdk8
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      securityContext:
        privileged: True
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    - name: hadolint
      image: docker.io/hadolint/hadolint:latest-debian
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      volumeMounts:
        - name: hadolint-config
          mountPath: /tmp/hadolint.yaml
          subPath: hadolint.yaml
  volumes:
    - name: hadolint-config
      configMap:
        name: hadolint-config-cm
        items:
        - key: hadolint.yaml
          path: hadolint.yaml
    """

    return dockerInDockerYaml.replaceAll(~/SA_NAME/, serviceAccount).replaceAll(~/URL_PLACEHOLDER/, registryUrl)
}
