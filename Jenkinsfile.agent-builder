pipeline {
  parameters { 
    string(name: 'REGISTRY_URL', defaultValue: 'registry.apps.kubernetes.local', description: 'The docker registry to push the image to') 
    string(name: 'BUILD_TAG', defaultValue: 'latest', description: 'The docker image label to tag the artifact with') 
    string(name: 'BUILD_NAME', defaultValue: 'agent-name', description: 'The name of the docker artifact to build') 
  }

  agent {
    kubernetes {
      label "jenkins-slave-dind"
      defaultContainer "jnlp"
      yaml k8sAgentPodYaml()
    }
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }

  stages {
    stage ("DOCKERFILE LINTING") {
      steps {
        container('hadolint') {
            sh "hadolint --config /tmp/hadolint.yaml containers/${BUILD_NAME}/Dockerfile | tee -a ${params.BUILD_NAME}-linting-output.txt"
        }
      }
      post {
          always {
              archiveArtifacts "${params.BUILD_NAME}-linting-output.txt"
          }
      }
    }

    stage ("BUILD DOCKER IMAGE") {
      steps {
        container("docker-in-docker") {
          echo "BUILDING CONTAINER ${params.BUILD_NAME} (${env.BUILD_ID})"
          sh "docker build -t ${params.BUILD_NAME}:${params.BUILD_TAG} containers/${BUILD_NAME}"
        }
      }
    }

    stage ("TAG CONTAINER") {
      steps {
        container("docker-in-docker") {
          echo "TAGGING CONTAINER: ${params.REGISTRY_URL}/${params.BUILD_NAME}:${params.BUILD_TAG} (${env.BUILD_ID})"
          sh "docker tag ${params.BUILD_NAME}:${params.BUILD_TAG} ${params.REGISTRY_URL}/${params.BUILD_NAME}:${params.BUILD_TAG}"
        }
      }
    }

    stage ("PUSH CONTAINER") {
      steps {
        container("docker-in-docker") {
          echo "PUSHING CONTAINER: ${params.REGISTRY_URL}/${params.BUILD_NAME}:${params.BUILD_TAG} (${env.BUILD_ID})"
          sh "docker push ${params.REGISTRY_URL}/${params.BUILD_NAME}:${params.BUILD_TAG}"
        }
      }
    }
  }
}

def k8sAgentPodYaml() {
  dockerInDockerYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
    - name: jnlp
      image: docker.io/jenkins/jnlp-slave:latest
      imagePullPolicy: Always
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: DOCKER_HOST
        value: tcp://localhost:2375
    - name: hadolint
      image: docker.io/hadolint/hadolint:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      volumeMounts:
        - name: hadolint-config
          mountPath: /tmp/hadolint.yaml
          subPath: hadolint.yaml
    - name: docker-in-docker
      image: docker.io/library/docker:19.03.5-dind
      securityContext:
        privileged: true
      volumeMounts:
        - name: docker-registry-config
          mountPath: /etc/docker/daemon.json
          subPath: daemon.json
        - name: docker-registry-config
          mountPath: /etc/systemd/system/docker.service.d/50-insecure-registries.conf
          subPath: 50-insecure-registries.conf
        - name: dind-storage
          mountPath: /var/lib/docker
  volumes:
    - name: hadolint-config
      configMap:
        name: hadolint-config-cm
        items:
        - key: hadolint.yaml
          path: hadolint.yaml
    - name: docker-registry-config
      configMap:
        name: insecure-registry-config
        items:
        - key: daemon.json
          path: daemon.json
        - key: 50-insecure-registries.conf
          path: 50-insecure-registries.conf
    - name: dind-storage
      emptyDir: {}
    """

    return dockerInDockerYaml
}
