pipeline {
  parameters {
    string(name: 'NEXUS_URL', defaultValue: 'nexus.apps.kubernetes.local', description: 'The Nexus server URL')
    string(name: 'MAVEN_REPO_NAME', defaultValue: 'maven-releases', description: 'The Maven repo on Nexus to push artifacts to')
    string(name: 'NEXUS_CREDENTIALS', defaultValue: 'jenkins-nexus', description: 'The Jenkins credentials to use when authenticating on Nexus')
    string(name: 'NEXUS_PROTO', defaultValue: 'http', description: 'The protocol to employ when connecting to Nexus (http,https)')
    string(name: 'SONAR_CREDS', defaultValue: 'jenkins-sonar', description: 'The Jenkins credentials to use when authenticating on SonarQube')
    string(name: 'SONAR_INSTALLATION', defaultValue: 'jenkins-sonar', description: 'The SonarQube installation name')
  }

  agent {
    kubernetes {
      label 'jenkins-slave-maven'
      defaultContainer 'jnlp'
      yaml k8sAgentPodYaml()
    }
  }

  environment {
    GROUP_ID = readMavenPom().getGroupId()
    ARTIFACT_ID = readMavenPom().getArtifactId()
    VERSION = readMavenPom().getVersion()
    PACKAGING = readMavenPom().getPackaging()
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }
  
  stages {
    stage ("MVN: PREPARE") {
      steps {
        container('jnlp') {
          echo "Preparing Maven Wrapper (${env.BUILD_ID})"
          sh "mvn -N io.takari:maven:wrapper"
        }
      }
    }

    stage ("MVN: BUILD") {
      steps {
        container('jnlp') {
          echo "Running maven build... (${env.BUILD_ID})"
          sh "./mvnw clean install -DskipTests"
        }
      }
    }

    stage ("MVN: UNIT TESTS") {
      steps {
        container('jnlp') {
          echo "Running maven tests... (${env.BUILD_ID})"
          sh "./mvnw test"
          echo "Archiving test results in JUnit format... (${env.BUILD_ID})"
          junit '**/target/surefire-reports/TEST-*.xml'
        }
      }
    }

    stage ("MVN: CODE COVERAGE") {
      steps {
        container('jnlp') {
          echo "Running maven jacoco plugin... (${env.BUILD_ID})"
          sh "./mvnw jacoco:report"
          jacoco( 
                execPattern: 'target/*.exec',
                classPattern: 'target/classes',
                sourcePattern: 'src/main/java',
                exclusionPattern: 'src/test*'
          )
        }
      }
    }

    stage ("SONAR: SONARQUBE ANALYSIS") {
      steps {
        container('jnlp') {
          echo "Running maven sonarscanner... (${env.BUILD_ID})"
          withSonarQubeEnv(credentialsId: "${params.SONAR_CREDS}", installationName: "${params.SONAR_INSTALLATION}") {
            sh 'mvn sonar:sonar'
          }
        }
      }
    }

    stage ("SONAR: WAIT FOR QUALITY GATE") {
      steps {
        container('jnlp') {
          echo "Evaluating Code Quality Gate... (${env.BUILD_ID})"
          waitForQualityGate abortPipeline: true
        }
      }
    }
    
    stage ("MVN: PACKAGE") {
      steps {
        container('jnlp') {
          echo "Running maven package... (${env.BUILD_ID})"
          sh "./mvnw clean package -DskipTests"
        }
      }
    }

    stage ("NEXUS: PUBLISH TO REPOSITORY") {
      steps {
        container('jnlp') {
          nexusArtifactUploader(
            nexusVersion: "nexus3",
            protocol: "${params.NEXUS_PROTO}",
            nexusUrl: "${params.NEXUS_URL}",
            groupId: "${GROUP_ID}",
            version: "${VERSION}.${env.BUILD_NUMBER}",
            repository: "${params.MAVEN_REPO_NAME}",
            credentialsId: "${params.NEXUS_CREDENTIALS}",
            artifacts: [
              [
               artifactId: "${ARTIFACT_ID}-runner",
               type: "${PACKAGING}",
               classifier: "",
               file: "target/${ARTIFACT_ID}-${VERSION}-runner.${PACKAGING}"
              ]
            ]);
        }
      }
    }
  }

  post {
    success {
      echo "Archiving artifacts for build ${env.BUILD_ID}"
      archiveArtifacts 'target/*.jar'
    }
  }
}

def k8sAgentPodYaml() {
  mavenYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
    - name: jnlp
      image: registry.apps.kubernetes.local/maven-agent:latest
      imagePullPolicy: IfNotPresent
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    """
  return mavenYaml
}