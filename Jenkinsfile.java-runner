pipeline {
  parameters { 
    string(name: 'REGISTRY_URL', defaultValue: 'registry.apps.kubernetes.local', description: 'The docker registry to push the image to') 
    string(name: 'ARTIFACT_NAME', defaultValue: 'org.redhat:demoapp:1.0.0-SNAPSHOT', description: 'The artifact name on Nexus. Format is groupID:artifactName:artifactVersion')
    string(name: 'IMAGE_NAME', defaultValue: 'java-runner', description: 'The name of the built application container')
    string(name: 'IMAGE_VERSION', defaultValue: 'latest', description: 'The version of the built application container')
  }

  agent {
    kubernetes {
      label "jenkins-slave-dind"
      defaultContainer "jnlp"
      yaml k8sAgentPodYaml()
    }
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }

  stages {
    stage ("BUILD DOCKER IMAGE") {
      steps {
        container("docker-in-docker") {
          echo "BUILDING CONTAINER ${params.IMAGE_NAME} (${env.BUILD_ID})"
          sh "docker build --build-arg nexus_repo_url=${params.REGISTRY_URL} --build-arg artifact_name=${params.ARTIFACT_NAME} -t ${params.IMAGE_NAME}:${params.IMAGE_VERSION} containers/${IMAGE_NAME}"
        }
      }
    }

    stage ("TAG APPLICATION CONTAINER IN CI") {
      steps {
        container("docker-in-docker") {
          echo "TAGGING CONTAINER: ${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION} (${env.BUILD_ID})"
          sh "docker tag ${params.IMAGE_NAME}:${params.IMAGE_VERSION} ${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION}"
        }
      }
    }

    stage ("PUSH APPLICATION CONTAINER") {
      steps {
        container("docker-in-docker") {
          echo "PUSHING CONTAINER: ${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION} (${env.BUILD_ID})"
          sh "docker push ${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION}"
        }
      }
    }

    stage ("TAG AND DEPLOY IN DEV") {
      steps {
        container("docker-in-docker") {
          echo "TAGGING CONTAINER: ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev (${env.BUILD_ID})"
          sh "docker tag ${params.IMAGE_NAME}:dev ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev"
          sh "docker push ${params.REGISTRY_URL}/${params.IMAGE_NAME}:dev"
        }
        container("jnlp") {
          echo "DEPLOYING APPLICATION IN DEV NAMESPACE (${env.BUILD_ID})"
        }
      }
    }
  }
}

def k8sAgentPodYaml() {
  dockerInDockerYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
    - name: jnlp
      image: registry.apps.kubernetes.local/maven-agent:latest
      imagePullPolicy: Always
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: DOCKER_HOST
        value: tcp://localhost:2375
    - name: docker-in-docker
      image: docker.io/library/docker:19.03.5-dind
      securityContext:
        privileged: true
      volumeMounts:
        - name: docker-registry-config
          mountPath: /etc/docker/daemon.json
          subPath: daemon.json
        - name: docker-registry-config
          mountPath: /etc/systemd/system/docker.service.d/50-insecure-registries.conf
          subPath: 50-insecure-registries.conf
        - name: dind-storage
          mountPath: /var/lib/docker
  volumes:
    - name: docker-registry-config
      configMap:
        name: insecure-registry-config
        items:
        - key: daemon.json
          path: daemon.json
        - key: 50-insecure-registries.conf
          path: 50-insecure-registries.conf
    - name: dind-storage
      emptyDir: {}
    """

    return dockerInDockerYaml
}