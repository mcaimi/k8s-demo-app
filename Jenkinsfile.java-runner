pipeline {
  parameters { 
    string(name: 'REGISTRY_URL', defaultValue: 'registry.apps.kubernetes.local', description: 'The docker registry to push the image to')
    string(name: 'NEXUS_URL', defaultValue: 'nexus.apps.kubernetes.local', description: 'The docker registry to push the image to')
    string(name: 'NEXUS_CREDS', defaultValue: 'jenkins-nexus', description: 'Credentials to use when connecting to Nexus (jenkins obkect name)')
    string(name: 'IMAGE_NAME', defaultValue: 'java-runner', description: 'The name of the built application container')
    string(name: 'IMAGE_VERSION', defaultValue: 'latest', description: 'The version of the built application container')
    string(name: 'TLS_VERIFY', defaultValue: 'false', description: 'Validate target registry TLS certificate before pushing image.') 
  }

  agent {
    kubernetes {
      label "jenkins-agent-jrunner"
      defaultContainer "jnlp"
      yaml k8sAgentPodYaml("${params.REGISTRY_URL}")
    }
  }

  environment {
    // https://jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials
    NEXUS_CREDENTIALS = credentials("${params.NEXUS_CREDS}")
    NEXUS_USER = "${env.NEXUS_CREDENTIALS_USR}"
    NEXUS_PASS = "${env.NEXUS_CREDENTIALS_PSW}"
    GROUP_ID = readMavenPom().getGroupId()
    ARTIFACT_ID = readMavenPom().getArtifactId()
    VERSION = readMavenPom().getVersion()
    PACKAGING = readMavenPom().getPackaging()
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
  }

  stages {
    stage ("DOCKERFILE LINTING") {
      steps {
        container('hadolint') {
            sh "hadolint --config /tmp/hadolint.yaml containers/${IMAGE_NAME}/Dockerfile | tee -a ${params.IMAGE_NAME}-linting-output.txt"
        }
      }
      post {
          always {
              archiveArtifacts "${params.IMAGE_NAME}-linting-output.txt"
          }
      }
    }

    stage ("BUILD DOCKER IMAGE") {
      steps {
        container("jnlp") {
          echo "BUILDING CONTAINER ${params.IMAGE_NAME} (${env.BUILD_ID})"
          sh 'buildah bud --build-arg nexus_auth=$NEXUS_USER:$NEXUS_PASS --build-arg nexus_repo_url=$NEXUS_URL --build-arg artifact_name=$GROUP_ID:$ARTIFACT_ID:$VERSION -t $IMAGE_NAME:$IMAGE_VERSION containers/$IMAGE_NAME'
        }
      }
    }

    stage ("TAG AND PUSH APPLICATION CONTAINER IN CI") {
      steps {
        container("jnlp") {
          echo "PUSHING CONTAINER: ${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION} (${env.BUILD_ID})"
          sh "buildah push --tls-verify=${params.TLS_VERIFY} localhost/${params.IMAGE_NAME}:${params.IMAGE_VERSION} docker://${params.REGISTRY_URL}/${params.IMAGE_NAME}:${params.IMAGE_VERSION}"
        }
      }
    }
  }
}

def k8sAgentPodYaml(registryUrl) {
  dockerInDockerYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
    - name: jnlp
      image: docker.io/mcaimi/jenkins-agent-buildah:jdk8
      imagePullPolicy: Always
      securityContext:
        privileged: True
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    - name: hadolint
      image: docker.io/hadolint/hadolint:latest-debian
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      volumeMounts:
        - name: hadolint-config
          mountPath: /tmp/hadolint.yaml
          subPath: hadolint.yaml
  volumes:
    - name: hadolint-config
      configMap:
        name: hadolint-config-cm
        items:
        - key: hadolint.yaml
          path: hadolint.yaml
    """

    return dockerInDockerYaml.replaceAll(~/URL_PLACEHOLDER/, registryUrl)
}
